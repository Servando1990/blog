---
import Layout from './Layout.astro';
import TableOfContents from '../components/TableOfContents.astro';
import { formatDate } from '../utils/dates';

export interface Props {
  title: string;
  date: Date;
  description: string;
  categories: string[];
  headings?: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { title, date, description, categories, headings = [] } = Astro.props;
---

<Layout title={title} description={description}>
  <div class="post-container">
    {headings.length > 0 && (
      <TableOfContents headings={headings} />
    )}
    
    <article class="post-content">
      <header class="post-header">
        <h1>{title}</h1>
        <div class="post-meta">
          <time datetime={date.toISOString()}>
            {formatDate(date)}
          </time>
        </div>
        {categories.length > 0 && (
          <div class="categories">
            {categories.map((category) => (
              <a href={`/categories/${category.toLowerCase()}`} class="category">
                {category}
              </a>
            ))}
          </div>
        )}
      </header>
      
      <div class="prose">
        <slot />
      </div>
      
      <nav class="post-nav">
        <a href="/posts" class="back-link">‚Üê Back to all posts</a>
      </nav>
    </article>
  </div>
</Layout>

<style>
  .post-container {
    display: flex;
    gap: 2rem;
    align-items: flex-start;
  }

  .post-content {
    flex: 1;
    min-width: 0; /* Prevents flex item from overflowing */
  }

  .post-header {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--border);
  }
  
  .post-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    line-height: 1.2;
  }
  
  .post-meta {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-bottom: 1rem;
  }

  .categories {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .categories .category {
    background-color: var(--bg-secondary);
    color: var(--text-secondary);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.8125rem;
    font-weight: 500;
    border: 1px solid var(--border);
    transition: all 0.2s;
  }

  .categories .category:hover {
    background-color: var(--accent);
    color: white;
    text-decoration: none;
  }
  
  .prose {
    line-height: 1.7;
    max-width: none;
  }
  
  .prose > :first-child {
    margin-top: 0;
  }
  
  .prose > :last-child {
    margin-bottom: 0;
  }

  /* Ensure headings have proper IDs for anchor linking */
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    scroll-margin-top: 2rem;
    position: relative;
  }

  /* Add hover effect for heading anchors */
  .prose h1:hover::before,
  .prose h2:hover::before,
  .prose h3:hover::before,
  .prose h4:hover::before,
  .prose h5:hover::before,
  .prose h6:hover::before {
    content: '#';
    position: absolute;
    left: -1.5rem;
    color: var(--accent);
    font-weight: normal;
    opacity: 0.7;
  }
  
  .post-nav {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border);
  }
  
  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--accent);
    font-weight: 500;
    transition: all 0.2s;
  }
  
  .back-link:hover {
    color: #2563eb;
    text-decoration: none;
    transform: translateX(-4px);
  }

  /* Responsive design */
  @media (max-width: 1200px) {
    .post-container {
      flex-direction: column;
    }
  }
  
  @media (max-width: 768px) {
    .post-container {
      gap: 1rem;
    }

    .post-header h1 {
      font-size: 2rem;
    }
    
    .categories {
      gap: 0.5rem;
    }

    .categories .category {
      font-size: 0.75rem;
      padding: 0.2rem 0.6rem;
    }
  }
</style>